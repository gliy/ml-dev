Standard ML of New Jersey v110.74 [built: Tue Jan 31 16:19:10 2012]
sml [rtsargs] [options] [files]

  rtsargs:
    @SMLload=<h>     (start specified heap image)
    @SMLalloc=<s>    (specify size of allocation area)
    @SMLcmdname=<n>  (set command name)
    @SMLquiet        (load heap image silently)
    @SMLverbose      (show heap image load progress)
    @SMLobjects      (show list of executable objects)
    @SMLdebug=<f>    (write debugging info to file)

  files:
    <file>.cm        (CM.make or CM.autoload)
    -m               (switch to CM.make)
    -a               (switch to CM.autoload; default)
    <file>.sig       (use)
    <file>.sml       (use)
    <file>.fun       (use)

  options:
    -D<name>=<v>     (set CM variable to given value)
    -D<name>         (set CM variable to 1)
    -Uname           (unset CM variable)
    -C<control>=<v>  (set named control)
    -H               (produce complete help listing)
    -h               (produce minimal help listing)
    -h<level>        (help with obscurity limit)
    -S               (list all current settings)
    -s<level>        (limited list of settings)
    -E               (list all environment variables)
    -e<level>        (limited list of environment variables)

  SML/NJ controls:
   tracing/debugging/profiling:
         tdp.instrument    (trace-, debug-, and profiling instrumentation mode)
   Compilation Manager (CM):
         cm.verbose                                             (CM chattiness)
         cm.debug                                               (CM debug mode)
         cm.keep-going                (whether CM presses on in face of errors)
         cm.pathconfig                         (global path configuration file)
         cm.parse-caching                         (limit on parse trees cached)
         cm.local-pathconfig                    (local path configuration file)
         cm.warn-obsolete                 (whether CM accepts old-style syntax)
         cm.conserve-memory                              (CM memory stinginess)
         cm.generate-index               (whether CM generates library indices)
         cm.tolerate-tool-failures
                (let CM continue if a tool fails as long as target files exist)
         cm.force-tools                (force execution of shell-command tools)
    CM Make Tool:
          cm.make-tool.command                              (the shell-command)
          cm.make-tool.smlnj-bindir   (whether to pass SMLNJ_BINDIR to command)
   MLRISC:
         mlrisc.mlrisc                                                      (?)
         mlrisc.phases                                          (MLRISC phases)
         mlrisc.asm-show-cellset              (whether to show cellsets in asm)
         mlrisc.asm-show-region                (whether to show regions in asm)
         mlrisc.asm-show-cutsto                 (whether to show cutsTo in asm)
         mlrisc.asm-indent-copies             (whether to indent copies in asm)
         mlrisc.points-to-show-max-levels  (max # of level to show in pointsTo)
         mlrisc.disable-cps-branch-prob
                                  (Turn CPS branch probability computation off)
         mlrisc.viewer                                         (viewer setting)
         mlrisc.ra-verbose                                      (RA chattiness)
         mlrisc.ra-spill-coalescing               (RA spill coalescing counter)
         mlrisc.ra-spill-propagation             (RA spill propagation counter)
         mlrisc.x86-fast-fp          (whether to use the fast-fp backend (x86))
         mlrisc.dump-cfg-after-omit-frame-pointer
                           (whether CFG is shown after omit-framepointer phase)
         mlrisc.variable-length-backpatch-iterations
                                (number of variable-length backpath iterations)
         mlrisc.ra-preserve-dead-copies
                                    (Dead copies are not removed when spilling)
         mlrisc.ra-int-spills                              (RA int spill count)
         mlrisc.ra-int-reloads                            (RA int reload count)
         mlrisc.ra-int-renames                            (RA int rename count)
         mlrisc.ra-float-spills                          (RA float spill count)
         mlrisc.ra-float-reloads                        (RA float reload count)
         mlrisc.ra-float-renames                        (RA float rename count)
         mlrisc.x86-cfg-debug                              (x86 CFG debug mode)
         mlrisc.x86-fp-debug                                (x86 fp debug mode)
         mlrisc.x86-fp-trace                                (x86 fp trace mode)
         mlrisc.ra-dump-size                          (whether to show RA size)
         mlrisc.dump-cfg-before-ra             (whether CFG is shown before RA)
         mlrisc.dump-cfg-after-ra               (whether CFG is shown after RA)
         mlrisc.dump-cfg-after-spilling(whether CFG is shown after spill phase)
         mlrisc.dump-cfg-before-all-ra     (whether CFG is shown before all RA)
         mlrisc.dump-cfg-after-all-ra       (whether CFG is shown after all RA)
         mlrisc.dump-interference-graph   (whether interference graph is shown)
         mlrisc.ra-debug-spilling                  (debug mode for spill phase)
         mlrisc.ra-count                                           (RA counter)
         mlrisc.ra-rebuild                                   (RA build counter)
         mlrisc.tmpName                                       (tmpName setting)
         mlrisc.view-outline                             (view-outline setting)
         mlrisc.disable-loop-probabilities
                           (when true, loop probability estimates are disabled)
         mlrisc.dump-cfg-after-loop-probabilities
              (when true, flow graph is shown after loop probability estimates)
         mlrisc.dump-frequencies
                             (when true, block and edge frequencies are output)
         mlrisc.dump-cfg-after-frequencies
                     (when true, the CFG is output after frequency computation)
         mlrisc.dump-cfg-after-complete-probs
                        (when true, CFG is output after probability completion)
         mlrisc.dump-block-list                   (whether block list is shown)
         mlrisc.dump-cfg-after-placement
                                   (whether CFG is shown after block placement)
         mlrisc.weighted-block-placement
                                 (whether MLRISC does weighted block placement)
         mlrisc.disable-jump-chain-elim
                                   (whether jump chain elimination is disabled)
         mlrisc.dump-cfg-after-jump-chain-elim
                     (whether flow graph is shown after jump chain elimination)
         mlrisc.debug-gc                             (GC invocation debug mode)
         mlrisc.debug-check-gc                             (Check GC debugging)
         mlrisc.check-gc                                  (Turn on GC checking)
         mlrisc.cfg-graphical-view(graphical view of cfg after block placement)
         mlrisc.cfg-graphical-view-size
                                (minimium threshold for size of graphical view)
         mlrisc.dump-initial-cfg         (Dump CFG after instruction selection)
         mlrisc.mlrisc-gc-types                   (whether to use GC type info)
         mlrisc.mlrisc-gcsafety (whether to optimize before generating GC code)
         mlrisc.split-entry-block                (whether to split entry block)
         mlrisc.debug-cps-spill                          (CPS spill debug mode)
         mlrisc.debug-cps-spill-info                (CPS spill info debug mode)
   cross-module inlining:
         inline.split-aggressiveness        (aggressiveness of lambda-splitter)
   compiler settings:
         basic.print-warnings                  (whether warnings get generated)
   compiler print settings:
         print.depth                                          (max print depth)
         print.length                                        (max print length)
         print.string-depth                            (max string print depth)
         print.intinf-depth                        (max IntInf.int print depth)
         print.loop                                                (print loop)
         print.signatures                       (max signature expansion depth)
         print.opens                                             (print `open')
         print.linewidth                   (line-width hint for pretty printer)
   parser settings:
         parser.primary-prompt                                 (primary prompt)
         parser.secondary-prompt                             (secondary prompt)
         parser.lazy-keyword           (whether `lazy' is considered a keyword)
         parser.overload               (whether (_)overload keyword is enabled)
         parser.quotations           (whether (anti-)quotations are recognized)
   match compiler settings:
         compiler-mc.print-args                          (arguments print mode)
         compiler-mc.print-ret                              (return print mode)
         compiler-mc.nobind-warn    (whether to warn if no variables get bound)
         compiler-mc.warn-non-exhaustive-bind
                                       (whether to warn on non-exhaustive bind)
         compiler-mc.error-non-exhaustive-bind
                                      (whether non-exhaustive bind is an error)
         compiler-mc.warn-non-exhaustive-match
                                      (whether to warn on non-exhaustive match)
         compiler-mc.error-non-exhaustive-match
                                     (whether non-exhaustive match is an error)
         compiler-mc.warn-redundant      (whether to warn on redundant matches)
         compiler-mc.error-redundant    (whether a redundant match is an error)
   elaborator datastructures:
         ed.save-lvar-names                                                 (?)
         ed.ee-debugging                                                    (?)
         ed.mu-debugging                                                    (?)
         ed.tu-debugging                                                    (?)
   elaborator flags:
         elab.et-debugging                                 (ElabType debugging)
         elab.es-debugging                                  (ElabSig debugging)
         elab.ins-debugging                             (Instantiate debugging)
         elab.sm-debugging                                 (Sigmatch debugging)
         elab.ec-debugging                                 (ElabCore debugging)
         elab.em-debugging                                  (ElabMod debugging)
         elab.tc-debugging                                (TypeCheck debugging)
         elab.uni-debugging                                   (Unify debugging)
         elab.instantiate-sigs                           (instantiate all sigs)
         elab.internals                                    (show internal reps)
         elab.markabsyn                                  (mark abstract syntax)
         elab.boxedconstreps                         (boxed const constructors)
         elab.mult-def-warn                             (warn on multiple defs)
         elab.share-def-error                                (check share defs)
         elab.value-restriction-local-warn
                                     (warn on value restriction for local defs)
         elab.value-restriction-top-warn
                                       (warn on value restriction at top level)
         elab.show-type-error-culprits   (show culprits in type error messages)
   miscellaneous control settings:
         control.debugging                                                  (?)
         control.printAst                                                   (?)
         control.printAbsyn                                                 (?)
         control.interp                                                     (?)
         control.progressMsgs                                               (?)
         control.track-exn    (whether to generate code that tracks exceptions)
         control.poly-eq-warn        (whether to warn about calls of polyEqual)
         control.indexing                                                   (?)
         control.inst-sigs                                                  (?)
         control.preserve-names                                             (?)
   optimizer (FLINT) settings:
         flint.print                                                  (show IR)
         flint.print-phases                                       (show phases)
         flint.print-fct-types                            (show function types)
         flint.plchk                                        (typecheck plambda)
         flint.nmdebugging                    (PLambda normalization debugging)
         flint.redebugging                              (reify phase debugging)
         flint.rtdebugging                         (runtime types(?) debugging)
         flint.phases                                            (FLINT phases)
         flint.tmdebugging                               (TransTypes debugging)
         flint.trdebugging                                (Translate debugging)
         flint.inline-theshold                               (inline threshold)
         flint.unroll-threshold                              (unroll threshold)
         flint.maxargs                                (max number of arguments)
         flint.dropinvariant                                    (dropinvariant)
         flint.specialize                               (whether to specialize)
         flint.sharewrap                            (whether to share wrappers)
         flint.saytappinfo                  (whether to show typelifting stats)
         flint.check                              (whether to typecheck the IR)
         flint.check-datatypes                            (typecheck datatypes)
         flint.check-kinds                          (check kinding information)
   code generator settings:
         cg.tailrecur                                                       (?)
         cg.recordopt                                                       (?)
         cg.tail                                                            (?)
         cg.allocprof                                                       (?)
         cg.closureprint                                                    (?)
         cg.closure-strategy                                                (?)
         cg.lambdaopt                                                       (?)
         cg.cpsopt                                       (cps optimizer phases)
         cg.rounds                                     (max # of cpsopt rounds)
         cg.path                                                            (?)
         cg.betacontract                                                    (?)
         cg.eta                                                             (?)
         cg.selectopt                                                       (?)
         cg.dropargs                                                        (?)
         cg.deadvars                                                        (?)
         cg.flattenargs                                                     (?)
         cg.extraflatten                                                    (?)
         cg.switchopt                                                       (?)
         cg.handlerfold                                                     (?)
         cg.branchfold                                                      (?)
         cg.arithopt                                                        (?)
         cg.betaexpand                                                      (?)
         cg.unroll                                                          (?)
         cg.knownfiddle                                                     (?)
         cg.invariant                                                       (?)
         cg.targeting                                                       (?)
         cg.lambdaprop                                                      (?)
         cg.newconreps                                                      (?)
         cg.unroll-recur                                                    (?)
         cg.sharepath                                                       (?)
         cg.staticprof                                                      (?)
         cg.hoistup                                                         (?)
         cg.hoistdown                                                       (?)
         cg.recordcopy                                                      (?)
         cg.recordpath                                                      (?)
         cg.verbose                                                         (?)
         cg.debugcps                                                        (?)
         cg.misc4                                                           (?)
         cg.argrep                                                          (?)
         cg.bodysize                                                        (?)
         cg.reducemore                                                      (?)
         cg.alphac                                                          (?)
         cg.comment                                                         (?)
         cg.known-gen                                                       (?)
         cg.known-cl-gen                                                    (?)
         cg.escape-gen                                                      (?)
         cg.callee-gen                                                      (?)
         cg.spill-gen                                                       (?)
         cg.foldconst                                                       (?)
         cg.etasplit                                                        (?)
         cg.printit                                       (whether to show CPS)
         cg.printsize                                                       (?)
         cg.scheduling                                                      (?)
         cg.cse                                                             (?)
         cg.opt-after-closure                                               (?)
         cg.uncurry                                                         (?)
         cg.if-idiom                                                        (?)
         cg.comparefold                                                     (?)
         cg.csehoist                                                        (?)
         cg.rangeopt                                                        (?)
         cg.icount                                                          (?)
         cg.debug-rep                                                       (?)
         cg.checklty1                                                       (?)
         cg.checklty2                                                       (?)
         cg.checklty3                                                       (?)
         cg.checkcps1                                                       (?)
         cg.checkcps2                                                       (?)
         cg.checkcps3                                                       (?)
         cg.checkcps                                                        (?)
         cg.flatfblock                                                      (?)
         cg.deadup                                                          (?)
         cg.poll-checks                                                     (?)
         cg.poll-ratio-a-to-i                                               (?)
         cg.mem-disambiguate                                                (?)
         cg.control-dependence                                              (?)
         cg.flinton                                                         (?)
         cg.compdebugging                                                   (?)
