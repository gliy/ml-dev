package in.iitd.mldev.launch;

import in.iitd.mldev.launch.background.ISmlParsed;

import java.util.ArrayList;
import java.util.List;
import java.util.MissingResourceException;
import java.util.ResourceBundle;

import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IConfigurationElement;
import org.eclipse.core.runtime.IExtension;
import org.eclipse.core.runtime.IExtensionPoint;
import org.eclipse.core.runtime.IExtensionRegistry;
import org.eclipse.core.runtime.Platform;
import org.eclipse.jface.preference.IPreferenceStore;
import org.eclipse.ui.plugin.AbstractUIPlugin;
import org.osgi.framework.BundleContext;

/**
 * The main plugin class. Generated by Eclipse and not modified much. Contains
 * "global" string constants used as identifiers by many classes.
 */
public class SmlLaunchPlugin extends AbstractUIPlugin {
	// The shared instance.
	private static SmlLaunchPlugin plugin;
	// Resource bundle.
	private ResourceBundle resourceBundle;

	/** String attribute for the path to the SML executable. */
	public static final String SML_EXECUTABLE_PATH = "in.iitd.mldev.smlExecutablePath";
	/** String attribute for the project name in a launch configuration. */
	public static final String SML_CONFIG_PROJECT = "in.iitd.mldev.smlConfigProject";
	/** String attribute for the file path in a launch configuration. */
	public static final String SML_CONFIG_FILE = "in.iitd.mldev.smlConfigFile";
	/**
	 * Boolean attribute for whether the file to be launched is an SML file or a
	 * CM description file.
	 */
	public static final String SML_CONFIG_IS_CM = "in.iitd.mldev.smlConfigIsCm";
	/**
	 * String attribute for the CM make function in the preference store. The
	 * value of the preference is one of the fields SML_CM_MAKE_UNIT,
	 * SML_CM_MAKE_STRING, and SML_CM_MAKEP_STRING.
	 */
	public static final String SML_CM_MAKE_FUNCTION = "in.iitd.mldev.smlCmMakeFunction";
	/** Indicates that the CM make function is "CM.make ()". */
	public static final String SML_CM_MAKE_UNIT = "";
	/** Indicates that the CM make function is "CM.make &lt;file&gt;". */
	public static final String SML_CM_MAKE_STRING = "CM.make";
	/** Indicates that the CM make function is "CM.make' &lt;file&gt;". */
	public static final String SML_CM_MAKEP_STRING = "CM.make'";
	private static final String SML_PARSE_EXTENSION_ID = "in.iitd.mldev.launch.in.iitd.mldev.launch.parse";
	private List<ISmlParsed> parseListeners;

	/**
	 * The constructor.
	 */
	public SmlLaunchPlugin() {
		super();
		plugin = this;
		try {
			resourceBundle = ResourceBundle
					.getBundle("in.iitd.mldev.launch.SmlLaunchPluginResources");
		} catch (MissingResourceException x) {
			resourceBundle = null;
		}
	}

	/**
	 * This method is called upon plug-in activation
	 */
	public void start(BundleContext context) throws Exception {
		super.start(context);
	}

	/**
	 * This method is called when the plug-in is stopped
	 */
	public void stop(BundleContext context) throws Exception {
		super.stop(context);
	}

	/**
	 * Returns the shared instance.
	 */
	public static SmlLaunchPlugin getDefault() {
		return plugin;
	}

	protected void initializeDefaultPreferences(IPreferenceStore store) {
		store.setDefault(SML_EXECUTABLE_PATH, "");
		store.setDefault(SML_CM_MAKE_FUNCTION, SML_CM_MAKE_UNIT);
	}

	/**
	 * Returns the string from the plugin's resource bundle, or 'key' if not
	 * found.
	 */
	public static String getResourceString(String key) {
		ResourceBundle bundle = SmlLaunchPlugin.getDefault()
				.getResourceBundle();
		try {
			return (bundle != null) ? bundle.getString(key) : key;
		} catch (MissingResourceException e) {
			return key;
		}
	}

	/**
	 * Returns the plugin's resource bundle,
	 */
	public ResourceBundle getResourceBundle() {
		return resourceBundle;
	}

	public List<ISmlParsed> getParseListeners() {
		if (parseListeners == null) {
			parseListeners = new ArrayList<ISmlParsed>();
			try {
				IExtensionRegistry registry = Platform.getExtensionRegistry();
				IExtensionPoint extensionPoint = registry
						.getExtensionPoint(SML_PARSE_EXTENSION_ID);
				IExtension[] extensions = extensionPoint.getExtensions();
				if(extensions == null) {
					extensions = new IExtension[0];
				}
				// For each extension ...
				for (int i = 0; i < extensions.length; i++) {
					IExtension extension = extensions[i];
					IConfigurationElement[] elements = extension
							.getConfigurationElements();
					// For each member of the extension ...
					for (int j = 0; j < elements.length; j++) {
						IConfigurationElement element = elements[j];
						parseListeners.add((ISmlParsed) element
								.createExecutableExtension("class"));
					}
				}
			} catch (CoreException ex) {
				ex.printStackTrace();
			}
					
				
			
		}

		return parseListeners;
	}
}
