package in.iitd.mldev.ui;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.MissingResourceException;
import java.util.ResourceBundle;

import org.eclipse.core.runtime.preferences.IEclipsePreferences;
import org.eclipse.core.runtime.preferences.InstanceScope;
import org.eclipse.jface.preference.IPreferenceStore;
import org.eclipse.jface.preference.PreferenceConverter;
import org.eclipse.jface.preference.PreferenceStore;
import org.eclipse.swt.graphics.RGB;
import org.eclipse.ui.editors.text.templates.ContributionContextTypeRegistry;
import org.eclipse.ui.editors.text.templates.ContributionTemplateStore;
import org.eclipse.ui.plugin.AbstractUIPlugin;
import org.osgi.framework.BundleContext;

/** The main plugin class. Generated by Eclipse and not modified much.
 * Contains "global" string constants used as identifiers by many classes. */
/* TODO: write more TODOs */
public class SmlUiPlugin extends AbstractUIPlugin {
	//The shared instance.
	private static SmlUiPlugin plugin;
	
	//Resource bundle.
	private ResourceBundle resourceBundle;
	private IEclipsePreferences launchPrefs;
	private ContributionContextTypeRegistry registry;
	private ContributionTemplateStore store;

	/**
	 * The constructor.
	 */
	public SmlUiPlugin () {
		super();
		plugin = this;
		try {
			resourceBundle = ResourceBundle.getBundle("in.iitd.mldev.ui.SmlUiPluginResources");
			
		} catch (MissingResourceException x) {
			resourceBundle = null;
		}
			launchPrefs = InstanceScope.INSTANCE.getNode("in.iitd.mldev.launch");
	}

	public String getLaunchPath(){
		return launchPrefs.get("in.iitd.mldev.smlExecutablePath", null);
	}
	/**
	 * This method is called upon plug-in activation
	 */
	public void start (BundleContext context) throws Exception {
		super.start(context);
	}

	/**
	 * This method is called when the plug-in is stopped
	 */
	public void stop (BundleContext context) throws Exception {
		super.stop(context);
	}

	/**
	 * Returns the shared instance.
	 */
	public static SmlUiPlugin getDefault () {
		return plugin;
	}

	/** Initializes default values for this plug-in's preferences. */
	/* TODO: This is deprecated. See the deprecated comment in
	 * Plugin.initializeDefaultPluginPreferences. */
	@Override
	protected void initializeDefaultPluginPreferences () {
		IPreferenceStore store = getPreferenceStore();
		store.setDefault(PreferenceConstants.SML_BRACKET_MATCHING_ENABLED, true);
		PreferenceConverter.setDefault(store, PreferenceConstants.SML_BRACKET_MATCHING_COLOR, new RGB(192, 192, 192));
		PreferenceConverter.setDefault(store, PreferenceConstants.SML_KEYWORD_COLOR, new RGB(128,0,128));
		PreferenceConverter.setDefault(store, PreferenceConstants.SML_STRING_COLOR, new RGB(0,0,255));
		PreferenceConverter.setDefault(store, PreferenceConstants.SML_COMMENT_COLOR, new RGB(0,128,0));
		PreferenceConverter.setDefault(store, PreferenceConstants.SML_INT_COLOR, new RGB(128,128,0));
		PreferenceConverter.setDefault(store, PreferenceConstants.SML_REAL_COLOR, new RGB(128,128,50));
		store.setDefault( PreferenceConstants.SML_REPL_HINTS,true);
		setupRainbowParenDefaults(store);
		store.setDefault(PreferenceConstants.SML_TAB_WIDTH, 2);
		store.setDefault(PreferenceConstants.SML_MARK_ERRORS, true);
	}

	private void setupRainbowParenDefaults(IPreferenceStore store) {
		List<String> keys = getRainbowParenStrings();
		for (int i = 0; i < keys.size(); i++) {
			PreferenceConverter.setDefault(store, keys.get(i), PreferenceConstants.SML_RAINBOW_PAREN_DEFAULTS[i]);
		}
	}

	public static final List<String> getRainbowParenStrings() {
		List<String> rtn = new ArrayList<String>();
		for (int i = 0; i < PreferenceConstants.SML_RAINBOW_PAREN_COUNT; i++) {
			rtn.add(PreferenceConstants.SML_RAINBOW_PAREN + i);
		}
		return rtn;
	}

	/**
	 * Returns the string from the plugin's resource bundle,
	 * or 'key' if not found.
	 */
	public static String getResourceString (String key) {
		ResourceBundle bundle = SmlUiPlugin.getDefault().getResourceBundle();
		try {
			return (bundle != null) ? bundle.getString(key) : key;
		} catch (MissingResourceException e) {
			return key;
		}
	}

	/**
	 * Returns the plugin's resource bundle,
	 */
	public ResourceBundle getResourceBundle () {
		return resourceBundle;
	}
	
	public ContributionContextTypeRegistry getRegistry() {
		if(registry == null) {
			registry = new ContributionContextTypeRegistry();
			registry.addContextType("in.iitd.mldev.ui.SMLContextType");
		}
		return registry;
	}
	
	public ContributionTemplateStore getTemplateStore() {
		if(store == null) {
			store = new ContributionTemplateStore(getRegistry(), getPreferenceStore(), 
					PreferenceConstants.TEMPLATE_KEY);
			try {
				store.load();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		return store;
	}

}